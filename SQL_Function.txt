SQL Functions: Aggregate and Scalar
Aggregate Functions: return a single value, calculated from values in a column
Scalar Functions: returns a single value, based on the input value

Useful aggregate functions:

	AVG() - Returns the average value
	COUNT() - Returns the number of rows
	FIRST() - Returns the first value
	LAST() - Returns the last value
	MAX() - Returns the largest value
	MIN() - Returns the smallest value
	SUM() - Returns the sum

Useful scalar functions:

	UCASE() - Converts a field to upper case
	LCASE() - Converts a field to lower case
	MID() - Extract characters from a text field
	LEN() - Returns the length of a text field
	ROUND() - Rounds a numeric field to the number of decimals specified
	NOW() - Returns the current system date and time
	FORMAT() - Formats how a field is to be displayed

This directory goes through the functions in more detail with examples.

AVG(): returns the average value of a numeric column.
	SELECT AVG(col_name) FROM table_name
	SELECT AVG(col_name) AS (new_column_name) FROM table_name # addition of AS for a name for the average column created
	
	SELECT ProductName, Price FROM Products
	WHERE Price> (SELECT AVG(Price) FROM Products); #embedding the first function to use it as a parameter for a new table

COUNT(): returns the number of rows that matches a specified criteria.

	SELECT COUNT(col_name/*) FROM table_name; #*will return number of records in a table.
	SELECT COUNT (DISTINCT col_name) FROM table_name; # will return the number of distinct values (those which are repeated)

	SELECT COUNT(CustomerID) AS OrdersFromCustomerID7 FROM Orders
	WHERE CustomerID=7; #counts the number of orders from a customer from the Orders table

GROUP BY STATEMENT: aggregate functions often need this function to group the result-set by one or more columns.

	SELECT column_name, aggregate_function(column_name) #aggregate_function such as MAX()/SUM()
	FROM table_name
	WHERE column_name operator value
	GROUP BY column_name;			# helps to reveal all the information 

GROUP BY with a JOIN:

	SELECT Shippers.ShipperName,COUNT(Orders.OrderID) AS NumberOfOrders FROM Orders
	LEFT JOIN Shippers
	ON Orders.ShipperID=Shippers.ShipperID
	GROUP BY ShipperName;

GROUP BY on more than 1 column:

	SELECT Shippers.ShipperName, Employees.LastName, COUNT(Orders.OrderID) AS NumberOfOrders
	FROM ((Orders
	INNER JOIN Shippers
	ON Orders.ShipperID=Shippers.ShipperID)
	INNER JOIN Employees
	ON Orders.EmployeeID=Employees.EmployeeID)
	GROUP BY ShipperName,LastName;

HAVING(): Added to SQL because the WHERE keyword could not be used with aggregate functions.

	SELECT column_name, aggregate_function(column_name)	
	FROM table_name
 	WHERE column_name operator value
	GROUP BY column_name
	HAVING aggregate_function(column_name) operator value; 

	# general syntax shown here, with a JOIN below.

	SELECT Employees.LastName, COUNT(Orders.OrderID) AS NumberOfOrders FROM (Orders
	INNER JOIN Employees
	ON Orders.EmployeeID=Employees.EmployeeID)
	GROUP BY LastName
	HAVING COUNT(Orders.OrderID) > 10;

	# just break it down to understand it. Including a WHERE clause before GROUPING will incorporate more specific details.

UCASE() : converts the value of the field into uppercase.

	SELECT UCASE(col_name) AS ....
	FROM table_name;

LCASE() : see above syntax.

MID()	: used to extract characters from a text field.

	SELECT MID(column_name,start[,length]) AS some_name FROM table_name; 
	#column_name - Required. The field to extract characters from
	#start - Required. Specifies the starting position 
	#length - Optional. The number of characters to return. If omitted, the function returns the rest of the text.

LEN() 	: returns the length of the value in the text field

	SELECT LEN(column_name) AS ....
	FROM table_name;

ROUND()	: used to round a numeric field to the specified number of decimal places.
	# many DBs round .5 to the nearest even number to avoid a bias to infinity
	
	SELECT ROUND(column_name, decimals)  AS ....
	FROM table_name;

NOW()	: returns the current system date and time
	
	SELECT NOW() FROM table_name;

	SELECT col_name1, col_name2, NOW() AS ...
	FROM table_name
	# used in conjuction with other columns.

FORMAT(): used to format how the field is displayed (such as date in YYYY-MM-DD).

	SELECT FORMAT(col_name, format) FROM table_name;
	# basic use.

	SELECT col_name1, col_name2, FORMAT(NOW(),'YYYY-MM-DD') AS ...	
	FROM table_name
	# most common use


